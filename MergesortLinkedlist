/* Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Example 1:

Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given
linked list, the resultant matrix
will be 1->2->3->4->5.
*/
//Java Code
// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

class Driverclass
{
    
    public static void main (String[] args) 
    {
        Scanner sc= new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            while(n-- > 1){
		        tail.next = new Node(sc.nextInt());
		        tail = tail.next;
		    }
		   
		      head = new Solution().mergeSort(head);
		     printList(head);
		    System.out.println();
        }
    }
    public static void printList(Node head)
    {
        if(head == null)
           return;
           
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }
}


// } Driver Code Ends


//User function Template for Java
/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        this.data = key;
        next = null;
    }
} */

class Solution
{
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        if(head==null || head.next==null){
            return head;
        }
        Node mid= middle(head);
        Node nlist=mid.next;
        mid.next=null;
        Node l1=mergeSort(head);
        Node l2=mergeSort(nlist);
        
        return sort(l1,l2);
    }
    public static Node middle(Node head){
        if(head==null || head.next==null) return head;
        Node fast=head;
        Node slow=head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
 public static Node sort(Node l1, Node l2){
        if(l1==null) return l2;
        else if(l2==null) return l1;
        else{
        Node dummy=new Node(-1);
        Node prev=dummy;
        while(l1!=null && l2!=null){
            if(l1.data<l2.data){
                prev.next=l1;
                l1=l1.next;
            }
            else{ 
                prev.next=l2;
                l2=l2.next;
            }
            prev=prev.next;
        }
        prev.next= l1!=null?l1:l2;
         
        return dummy.next;  
        }    
        }
    
}
